{
  "address": "0x859697030604Dd9E1Cc393105e35b091a72DCbC8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "_hash",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_amount",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_hashes",
          "type": "bytes32[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "dispensedOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "_hashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9db76df4e8befb5a1ee4583795d06e1a1f22a8c6040ffe5ed5fb99e55b8b24dd",
  "receipt": {
    "to": null,
    "from": "0xae32631bdbb2474CC11594268427A2da3D6aBd6B",
    "contractAddress": "0x859697030604Dd9E1Cc393105e35b091a72DCbC8",
    "transactionIndex": 0,
    "gasUsed": "1336173",
    "logsBloom": "0x
    "blockHash": "0x8fecc016b3a7eb3b8c2e117e7ce51516a58667518eb187c17f0c4d2001a806f4",
    "transactionHash": "0x9db76df4e8befb5a1ee4583795d06e1a1f22a8c6040ffe5ed5fb99e55b8b24dd",
    "logs": [],
    "blockNumber": 31,
    "cumulativeGasUsed": "1336173",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "39212d748706f420edc0ecf223eec088",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"_hash\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_amount\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_hashes\",\"type\":\"bytes32[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"dispensedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_hashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of Multi-Token Standard contract\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,bytes32)\":{\"params\":{\"_hash\":\"Computed hash of erc721 contract address and its tokenId\",\"_owner\":\"The address of the token holder\"},\"returns\":{\"_0\":\"The _owner's balance of the Token type requested\"}},\"balanceOfBatch(address[],bytes32[])\":{\"params\":{\"_hashes\":\"Computed hash of erc721 contract address and its tokenId\",\"_owners\":\"The addresses of the token holders\"},\"returns\":{\"_0\":\"The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\"}},\"dispensedOf(bytes32)\":{\"params\":{\"_hash\":\"Computed hash of erc721 contract address and its tokenId\"},\"returns\":{\"_0\":\"The _owner's balance of the Token type requested\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"_operator\":\"Address of authorized operator\",\"_owner\":\"The owner of the Tokens\"},\"returns\":{\"isOperator\":\"True if the operator is approved, false if not\"}},\"safeBatchTransferFrom(address,address,bytes32[],uint256[],bytes)\":{\"params\":{\"_amounts\":\"Transfer amounts per token type\",\"_data\":\"Additional data with no specified format, sent in call to `_to`\",\"_from\":\"Source addresses\",\"_hashes\":\"Computed hash of erc721 contract address and its tokenId\",\"_to\":\"Target addresses\"}},\"safeTransferFrom(address,address,bytes32,uint256,bytes)\":{\"params\":{\"_amount\":\"Transfered amount\",\"_data\":\"Additional data with no specified format, sent in call to `_to`\",\"_from\":\"Source address\",\"_hash\":\"Computed hash of erc721 contract address and its tokenId\",\"_to\":\"Target address\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"_approved\":\"True if the operator is approved, false to revoke approval\",\"_operator\":\"Address to add to the set of authorized operators\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `_interfaceID` and\"}},\"transferFrom(address,address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Transfered amount\",\"_from\":\"Source address\",\"_hash\":\"Computed hash of erc721 contract address and its tokenId\",\"_to\":\"Target address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,bytes32)\":{\"notice\":\"Get the balance of an account's Tokens\"},\"balanceOfBatch(address[],bytes32[])\":{\"notice\":\"Get the balance of multiple account/token pairs\"},\"dispensedOf(bytes32)\":{\"notice\":\"Get the balance of an account's Tokens\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Queries the approval status of an operator for a given owner\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Called by contract from which tokens are transferred\"},\"safeBatchTransferFrom(address,address,bytes32[],uint256[],bytes)\":{\"notice\":\"Send multiple types of Tokens from the _from address to the _to address (with safety call)\"},\"safeTransferFrom(address,address,bytes32,uint256,bytes)\":{\"notice\":\"Transfers amount amount of an _id from the _from address to the _to address specified\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"transferFrom(address,address,bytes32,uint256)\":{\"notice\":\"Transfers amount amount of an _id from the _from address to the _to address specified\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/erc1155/ERC1155.sol\":\"ERC1155\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/common/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"src/common/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"src/erc1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\nimport \\\"../common/math/SafeMath.sol\\\";\\r\\nimport \\\"../common/utils/Address.sol\\\";\\r\\nimport \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\r\\nimport \\\"../erc721/ERC721TokenHolder.sol\\\";\\r\\nimport \\\"./interfaces/IERC1155.sol\\\";\\r\\nimport \\\"./utils/CustomERC165.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of Multi-Token Standard contract\\r\\n */\\r\\ncontract ERC1155 is IERC1155, CustomERC165, ERC721Holder {\\r\\n  using SafeMath for uint256;\\r\\n  using Address for address;\\r\\n\\r\\n  /***********************************|\\r\\n  |        Variables and Events       |\\r\\n  |__________________________________*/\\r\\n\\r\\n  // onReceive function signatures\\r\\n  bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\\r\\n  bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\\r\\n\\r\\n  // Objects balances\\r\\n  mapping (address => mapping(bytes32 => uint256)) internal balances;\\r\\n  mapping (bytes32 => uint256) internal dispensed; // token id => amount of ERC1155 dispensed\\r\\n\\r\\n  // Operator Functions\\r\\n  mapping (address => mapping(address => bool)) internal operators;\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |     Public Transfer Functions     |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\r\\n   * @param _from    Source address\\r\\n   * @param _to      Target address\\r\\n   * @param _hash    Computed hash of erc721 contract address and its tokenId\\r\\n   * @param _amount  Transfered amount\\r\\n   * @param _data    Additional data with no specified format, sent in call to `_to`\\r\\n   */\\r\\n  function safeTransferFrom(address _from, address _to, bytes32 _hash, uint256 _amount, bytes memory _data)\\r\\n    public override returns (bool)\\r\\n  {\\r\\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeTransferFrom: INVALID_OPERATOR\\\");\\r\\n    require(_to != address(0),\\\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\\\");\\r\\n    // require(_amount <= balances[_from][_id]) is not necessary since checked with safemath operations\\r\\n\\r\\n    _safeTransferFrom(_from, _to, _hash, _amount);\\r\\n\\r\\n    // currently do not support contract receivers;\\r\\n    _callonERC1155Received(_from, _to, _hash, _amount, gasleft(), _data);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\r\\n   * @param _from    Source address\\r\\n   * @param _to      Target address\\r\\n   * @param _hash    Computed hash of erc721 contract address and its tokenId\\r\\n   * @param _amount  Transfered amount\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, bytes32 _hash, uint256 _amount)\\r\\n    public override returns (bool)\\r\\n  {\\r\\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeTransferFrom: INVALID_OPERATOR\\\");\\r\\n    require(_to != address(0),\\\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\\\");\\r\\n    // require(_amount <= balances[_from][_id]) is not necessary since checked with safemath operations\\r\\n\\r\\n    _safeTransferFrom(_from, _to, _hash, _amount);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\r\\n   * @param _from     Source addresses\\r\\n   * @param _to       Target addresses\\r\\n   * @param _hashes   Computed hash of erc721 contract address and its tokenId\\r\\n   * @param _amounts  Transfer amounts per token type\\r\\n   * @param _data     Additional data with no specified format, sent in call to `_to`\\r\\n   */\\r\\n  function safeBatchTransferFrom(address _from, address _to, bytes32[] memory _hashes, uint256[] memory _amounts, bytes memory _data)\\r\\n    public override\\r\\n  {\\r\\n    // Requirements\\r\\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\\\");\\r\\n    require(_to != address(0), \\\"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\\\");\\r\\n\\r\\n    _safeBatchTransferFrom(_from, _to, _hashes, _amounts);\\r\\n    _callonERC1155BatchReceived(_from, _to, _hashes, _amounts, gasleft(), _data);\\r\\n  }\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |    Internal Transfer Functions    |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\r\\n   * @param _from    Source address\\r\\n   * @param _to      Target address\\r\\n   * @param _hash    Computed hash of erc721 contract address and its tokenId\\r\\n   * @param _amount  Transfered amount\\r\\n   */\\r\\n  function _safeTransferFrom(address _from, address _to, bytes32 _hash, uint256 _amount)\\r\\n    internal\\r\\n  {\\r\\n    // Update balances\\r\\n    balances[_from][_hash] = balances[_from][_hash].sub(_amount); // Subtract amount\\r\\n    balances[_to][_hash] = balances[_to][_hash].add(_amount);     // Add amount\\r\\n\\r\\n    // Emit event\\r\\n    emit TransferSingle(msg.sender, _from, _to, _hash, _amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\\r\\n   */\\r\\n  function _callonERC1155Received(address _from, address _to, bytes32 _hash, uint256 _amount, uint256 _gasLimit, bytes memory _data)\\r\\n    internal\\r\\n  {\\r\\n    // Check if recipient is contract\\r\\n    if (_to.isContract()) {\\r\\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received{gas: _gasLimit}(msg.sender, _from, _hash, _amount, _data);\\r\\n      require(retval == ERC1155_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\r\\n   * @param _from     Source addresses\\r\\n   * @param _to       Target addresses\\r\\n   * @param _hashes   Computed hash of erc721 contract address and its tokenId\\r\\n   * @param _amounts  Transfer amounts per token type\\r\\n   */\\r\\n  function _safeBatchTransferFrom(address _from, address _to, bytes32[] memory _hashes, uint256[] memory _amounts)\\r\\n    internal\\r\\n  {\\r\\n    require(_hashes.length == _amounts.length, \\\"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\\\");\\r\\n\\r\\n    // Number of transfer to execute\\r\\n    uint256 nTransfer = _hashes.length;\\r\\n\\r\\n    // Executing all transfers\\r\\n    for (uint256 i = 0; i < nTransfer; i++) {\\r\\n      // Update storage balance of previous bin\\r\\n      balances[_from][_hashes[i]] = balances[_from][_hashes[i]].sub(_amounts[i]);\\r\\n      balances[_to][_hashes[i]] = balances[_to][_hashes[i]].add(_amounts[i]);\\r\\n    }\\r\\n\\r\\n    // Emit event\\r\\n    emit TransferBatch(msg.sender, _from, _to, _hashes, _amounts);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\\r\\n   */\\r\\n  function _callonERC1155BatchReceived(address _from, address _to, bytes32[] memory _hashes, uint256[] memory _amounts, uint256 _gasLimit, bytes memory _data)\\r\\n    internal\\r\\n  {\\r\\n    // Pass data if recipient is contract\\r\\n    if (_to.isContract()) {\\r\\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived{gas: _gasLimit}(msg.sender, _from, _hashes, _amounts, _data);\\r\\n      require(retval == ERC1155_BATCH_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |         Operator Functions        |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\r\\n   * @param _operator  Address to add to the set of authorized operators\\r\\n   * @param _approved  True if the operator is approved, false to revoke approval\\r\\n   */\\r\\n  function setApprovalForAll(address _operator, bool _approved)\\r\\n    external override\\r\\n  {\\r\\n    // Update operator status\\r\\n    operators[msg.sender][_operator] = _approved;\\r\\n    emit ApprovalForAll(msg.sender, _operator, _approved);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Queries the approval status of an operator for a given owner\\r\\n   * @param _owner     The owner of the Tokens\\r\\n   * @param _operator  Address of authorized operator\\r\\n   * @return isOperator True if the operator is approved, false if not\\r\\n   */\\r\\n  function isApprovedForAll(address _owner, address _operator)\\r\\n    public override view returns (bool isOperator)\\r\\n  {\\r\\n    return operators[_owner][_operator];\\r\\n  }\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |         Balance Functions         |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Get the balance of an account's Tokens\\r\\n   * @param _owner  The address of the token holder\\r\\n   * @param _hash    Computed hash of erc721 contract address and its tokenId\\r\\n   * @return The _owner's balance of the Token type requested\\r\\n   */\\r\\n  function balanceOf(address _owner, bytes32 _hash)\\r\\n    public override view returns (uint256)\\r\\n  {\\r\\n    return balances[_owner][_hash];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Get the balance of multiple account/token pairs\\r\\n   * @param _owners The addresses of the token holders\\r\\n   * @param _hashes Computed hash of erc721 contract address and its tokenId\\r\\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\r\\n   */\\r\\n  function balanceOfBatch(address[] memory _owners, bytes32[] memory _hashes)\\r\\n    public override view returns (uint256[] memory)\\r\\n  {\\r\\n    require(_owners.length == _hashes.length, \\\"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\\\");\\r\\n\\r\\n    // Variables\\r\\n    uint256[] memory batchBalances = new uint256[](_owners.length);\\r\\n\\r\\n    // Iterate over each owner and token ID\\r\\n    for (uint256 i = 0; i < _owners.length; i++) {\\r\\n      batchBalances[i] = balances[_owners[i]][_hashes[i]];\\r\\n    }\\r\\n\\r\\n    return batchBalances;\\r\\n  }\\r\\n\\r\\n  /***********************************|\\r\\n  |         Deposits Functions        |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Get the balance of an account's Tokens\\r\\n   * @param _hash    Computed hash of erc721 contract address and its tokenId\\r\\n   * @return The _owner's balance of the Token type requested\\r\\n   */\\r\\n\\r\\n  function dispensedOf(bytes32 _hash)\\r\\n    public override view returns (uint256)\\r\\n  {\\r\\n    return dispensed[_hash];\\r\\n  }\\r\\n\\r\\n  /***********************************|\\r\\n  |          ERC165 Functions         |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Query if a contract implements an interface\\r\\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\\r\\n   * @return `true` if the contract implements `_interfaceID` and\\r\\n   */\\r\\n  function supportsInterface(bytes4 _interfaceID) public override virtual pure returns (bool) {\\r\\n    if (_interfaceID == type(IERC1155).interfaceId) {\\r\\n      return true;\\r\\n    }\\r\\n    return super.supportsInterface(_interfaceID);\\r\\n  }\\r\\n\\r\\n  /***********************************|\\r\\n  |   ERC721 on receive Functions     |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Called by contract from which tokens are transferred\\r\\n   */\\r\\n  function onERC721Received(\\r\\n      address,\\r\\n      address from,\\r\\n      uint256 tokenId,\\r\\n      bytes calldata\\r\\n  ) external override returns (bytes4) {\\r\\n\\r\\n      // TODO later allow custom\\r\\n      uint256 defaultAmount = 10**18;\\r\\n\\r\\n      // msg.sender = erc721 contract address\\r\\n      bytes32 uniqueHash = keccak256(abi.encodePacked(msg.sender, tokenId));\\r\\n\\r\\n      dispensed[uniqueHash] = defaultAmount;\\r\\n\\r\\n      // from = erc721 owner address\\r\\n      _mint(from, uniqueHash, defaultAmount, \\\"\\\");\\r\\n\\r\\n      return this.onERC721Received.selector;\\r\\n  }\\r\\n\\r\\n  /****************************************|\\r\\n  |            Minting Functions           |\\r\\n  |_______________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Mint _amount of tokens of a given id\\r\\n   * @param _to      The address to mint tokens to\\r\\n   * @param _hash     Hash of erc721 contract address and its tokenId\\r\\n   * @param _amount  The amount to be minted\\r\\n   * @param _data    Data to pass if receiver is contract\\r\\n   */\\r\\n  function _mint(address _to, bytes32 _hash, uint256 _amount, bytes memory _data)\\r\\n    internal\\r\\n  {\\r\\n    // Add _amount\\r\\n    balances[_to][_hash] = balances[_to][_hash].add(_amount);\\r\\n\\r\\n    // Emit event\\r\\n    emit TransferSingle(msg.sender, address(0x0), _to, _hash, _amount);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xe7723ad1bf15b9dfd7059d8341ee2992c804c0c25d2a1f41ccc4323ac3082064\",\"license\":\"MIT\"},\"src/erc1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\n\\n\\ninterface IERC1155 {\\n\\n  /****************************************|\\n  |                 Events                 |\\n  |_______________________________________*/\\n\\n  /**\\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n   *   Operator MUST be msg.sender\\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n   *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n   */\\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, bytes32 _hash, uint256 _amount);\\n\\n  /**\\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n   *   Operator MUST be msg.sender\\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n   *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n   */\\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, bytes32[] _hash, uint256[] _amounts);\\n\\n  /**\\n   * @dev MUST emit when an approval is updated\\n   */\\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n  /**\\n   * @dev MUST emit when the URI is updated for a token ID\\n   *   URIs are defined in RFC 3986\\n   *   The URI MUST point a JSON file that conforms to the \\\"ERC-1155 Metadata JSON Schema\\\"\\n   */\\n  event URI(string _amount, bytes32 indexed _hash);\\n\\n\\n  /****************************************|\\n  |                Functions               |\\n  |_______________________________________*/\\n\\n  /**\\n    * @notice Transfers amount of an _id from the _from address to the _to address specified\\n    * @dev MUST emit TransferSingle event on success\\n    * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n    * MUST throw if `_to` is the zero address\\n    * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\n    * MUST throw on any other error\\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n    * @param _from    Source address\\n    * @param _to      Target address\\n    * @param _hash    Computed hash of erc721 contract address and its tokenId\\n    * @param _amount  Transfered amount\\n    * @param _data    Additional data with no specified format, sent in call to `_to`\\n    */\\n  function safeTransferFrom(address _from, address _to, bytes32 _hash, uint256 _amount, bytes calldata _data) external returns (bool);\\n\\n  function transferFrom(address _from, address _to, bytes32 _hash, uint256 _amount) external returns (bool);\\n  /**\\n    * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n    * @dev MUST emit TransferBatch event on success\\n    * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n    * MUST throw if `_to` is the zero address\\n    * MUST throw if length of `_ids` is not the same as length of `_amounts`\\n    * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\n    * MUST throw on any other error\\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n    * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\n    * @param _from     Source addresses\\n    * @param _to       Target addresses\\n    * @param _hashes   Computed hash of erc721 contract address and its tokenId\\n    * @param _amounts  Transfer amounts per token type\\n    * @param _data     Additional data with no specified format, sent in call to `_to`\\n  */\\n  function safeBatchTransferFrom(address _from, address _to, bytes32[] calldata _hashes, uint256[] calldata _amounts, bytes calldata _data) external;\\n\\n  /**\\n   * @notice Get the balance of an account's Tokens\\n   * @param _owner  The address of the token holder\\n   * @param _hash   Computed hash of erc721 contract address and its tokenId\\n   * @return        The _owner's balance of the Token type requested\\n   */\\n  function balanceOf(address _owner, bytes32 _hash) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the balance of multiple account/token pairs\\n   * @param _owners The addresses of the token holders\\n   * @param _hashes Computed hash of erc721 contract address and its tokenId\\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n   */\\n  function balanceOfBatch(address[] calldata _owners, bytes32[] calldata _hashes) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Get the dispensed amount of ERC1155 tokens\\n   * @param _hash   Computed hash of erc721 contract address and its tokenId\\n   * @return        Amount of ERC1155 tokens that were dispensed on deposit of ERC721 token _id\\n   */\\n  function dispensedOf(bytes32 _hash) external view returns (uint256);\\n\\n  /**\\n   * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n   * @dev MUST emit the ApprovalForAll event on success\\n   * @param _operator  Address to add to the set of authorized operators\\n   * @param _approved  True if the operator is approved, false to revoke approval\\n   */\\n  function setApprovalForAll(address _operator, bool _approved) external;\\n\\n  /**\\n   * @notice Queries the approval status of an operator for a given owner\\n   * @param _owner     The owner of the Tokens\\n   * @param _operator  Address of authorized operator\\n   * @return isOperator True if the operator is approved, false if not\\n   */\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\\n}\\n\",\"keccak256\":\"0xf4502fb3102cb140b799de6790f3ad0ae391350ec43e9f9c1f54560f0afad949\",\"license\":\"MIT\"},\"src/erc1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\n\\n/**\\n * @dev ERC-1155 interface for accepting safe transfers.\\n */\\ninterface IERC1155TokenReceiver {\\n\\n  /**\\n   * @notice Handle the receipt of a single ERC1155 token type\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\\n   * This function MAY throw to revert and reject the transfer\\n   * Return of other amount than the magic value MUST result in the transaction being reverted\\n   * Note: The token contract address is always the message sender\\n   * @param _operator  The address which called the `safeTransferFrom` function\\n   * @param _from      The address which previously owned the token\\n   * @param _hash      Computed hash of erc721 contract address and its tokenId\\n   * @param _amount    The amount of tokens being transferred\\n   * @param _data      Additional data with no specified format\\n   * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n   */\\n  function onERC1155Received(address _operator, address _from, bytes32 _hash, uint256 _amount, bytes calldata _data) external returns(bytes4);\\n\\n  /**\\n   * @notice Handle the receipt of multiple ERC1155 token types\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\\n   * This function MAY throw to revert and reject the transfer\\n   * Return of other amount than the magic value WILL result in the transaction being reverted\\n   * Note: The token contract address is always the message sender\\n   * @param _operator  The address which called the `safeBatchTransferFrom` function\\n   * @param _from      The address which previously owned the token\\n   * @param _hashes    Computed hash of erc721 contract address and its tokenId\\n   * @param _amounts   An array containing amounts of each token being transferred\\n   * @param _data      Additional data with no specified format\\n   * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n   */\\n  function onERC1155BatchReceived(address _operator, address _from, bytes32[] calldata _hashes, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\\n}\\n\",\"keccak256\":\"0x5f3216695707e97d7a92ce5e0418f53f1210010baca11da022185c88383df6ab\",\"license\":\"MIT\"},\"src/erc1155/utils/CustomERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\nabstract contract CustomERC165 {\\r\\n  /**\\r\\n   * @notice Query if a contract implements an interface\\r\\n   * @param _interfaceID The interface identifier, as specified in ERC-165\\r\\n   * @return `true` if the contract implements `_interfaceID`\\r\\n   */\\r\\n  function supportsInterface(bytes4 _interfaceID) virtual public pure returns (bool) {\\r\\n    return _interfaceID == this.supportsInterface.selector;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x2484bab290964754fddab6aa150aa5eab53623f83162e9ce481a14d83af25599\",\"license\":\"MIT\"},\"src/erc721/ERC721TokenHolder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./interfaces/IERC721Receiver.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC721Receiver} interface.\\r\\n *\\r\\n * Accepts all token transfers.\\r\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\r\\n */\\r\\ncontract ERC721Holder is IERC721Receiver {\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Receiver-onERC721Received}.\\r\\n     *\\r\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(address, address, uint256, bytes calldata) external virtual override returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1c136a8fd97d170b1610315f11a92d95886eee3c9b5907b84a50aba4f9b72d7f\",\"license\":\"MIT\"},\"src/erc721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n    external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x321ee37ef4925020aa818a03ec7fe48e057561f65ab009a84f6c20c86026ade7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611748806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806383d8c7b711610076578063a22cb4651161005b578063a22cb465146105b2578063e6863ac4146105e0578063e985e9c5146106ab576100be565b806383d8c7b71461041e5780638487551414610595576100be565b80633d7ec1e5116100a75780633d7ec1e5146101db5780634d30b6be146103a45780637fe68381146103e2576100be565b806301ffc9a7146100c3578063150b7a0214610116575b600080fd5b610102600480360360208110156100d957600080fd5b50357fffffffff00000000000000000000000000000000000000000000000000000000166106d9565b604080519115158252519081900360200190f35b6101a66004803603608081101561012c57600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561016757600080fd5b82018360208201111561017957600080fd5b8035906020019184600183028401116401000000008311171561019b57600080fd5b50909250905061073e565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b6103a2600480360360a08110156101f157600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561022557600080fd5b82018360208201111561023757600080fd5b8035906020019184602083028401116401000000008311171561025957600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156102a957600080fd5b8201836020820111156102bb57600080fd5b803590602001918460208302840111640100000000831117156102dd57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561032d57600080fd5b82018360208201111561033f57600080fd5b8035906020019184600183028401116401000000008311171561036157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506107d5945050505050565b005b6103d0600480360360408110156103ba57600080fd5b506001600160a01b038135169060200135610892565b60408051918252519081900360200190f35b610102600480360360808110156103f857600080fd5b506001600160a01b038135811691602081013590911690604081013590606001356108b8565b6105456004803603604081101561043457600080fd5b81019060208101813564010000000081111561044f57600080fd5b82018360208201111561046157600080fd5b8035906020019184602083028401116401000000008311171561048357600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156104d357600080fd5b8201836020820111156104e557600080fd5b8035906020019184602083028401116401000000008311171561050757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061096d945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610581578181015183820152602001610569565b505050509050019250505060405180910390f35b6103d0600480360360208110156105ab57600080fd5b5035610a85565b6103a2600480360360408110156105c857600080fd5b506001600160a01b0381351690602001351515610a97565b610102600480360360a08110156105f657600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a08101608082013564010000000081111561063657600080fd5b82018360208201111561064857600080fd5b8035906020019184600183028401116401000000008311171561066a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610b23945050505050565b610102600480360360408110156106c157600080fd5b506001600160a01b0381358116916020013516610be7565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fa5d8011d00000000000000000000000000000000000000000000000000000000141561072d57506001610739565b61073682610c15565b90505b919050565b604080513360601b6020808301919091526034808301879052835180840390910181526054830180855281519183019190912060008181526001909352848320670de0b6b3a76400009081905560749094019094528181529092906107a890889083908590610c5f565b507f150b7a0200000000000000000000000000000000000000000000000000000000979650505050505050565b336001600160a01b03861614806107f157506107f18533610be7565b61082c5760405162461bcd60e51b815260040180806020018281038252602f81526020018061166b602f913960400191505060405180910390fd5b6001600160a01b0384166108715760405162461bcd60e51b815260040180806020018281038252603081526020018061160f6030913960400191505060405180910390fd5b61087d85858585610cf1565b61088b858585855a86610f9c565b5050505050565b6001600160a01b0391909116600090815260208181526040808320938352929052205490565b6000336001600160a01b03861614806108d657506108d68533610be7565b6109115760405162461bcd60e51b815260040180806020018281038252602a8152602001806115b0602a913960400191505060405180910390fd5b6001600160a01b0384166109565760405162461bcd60e51b815260040180806020018281038252602b815260200180611585602b913960400191505060405180910390fd5b610962858585856111c5565b506001949350505050565b606081518351146109af5760405162461bcd60e51b815260040180806020018281038252602c81526020018061163f602c913960400191505060405180910390fd5b6060835167ffffffffffffffff811180156109c957600080fd5b506040519080825280602002602001820160405280156109f3578160200160208202803683370190505b50905060005b8451811015610a7d57600080868381518110610a1157fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000858381518110610a4757fe5b6020026020010151815260200190815260200160002054828281518110610a6a57fe5b60209081029190910101526001016109f9565b509392505050565b60009081526001602052604090205490565b3360008181526002602090815260408083206001600160a01b0387168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b6000336001600160a01b0387161480610b415750610b418633610be7565b610b7c5760405162461bcd60e51b815260040180806020018281038252602a8152602001806115b0602a913960400191505060405180910390fd5b6001600160a01b038516610bc15760405162461bcd60e51b815260040180806020018281038252602b815260200180611585602b913960400191505060405180910390fd5b610bcd868686866111c5565b610bdb868686865a876112a1565b50600195945050505050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b6001600160a01b038416600090815260208181526040808320868452909152902054610c8b9083611444565b6001600160a01b038516600081815260208181526040808320888452825280832094909455835187815290810186905283519293919233927fae2134db087f9040aa11ac22c005cb287be3c6195793167a1e17cb25e75d6814928290030190a450505050565b8051825114610d315760405162461bcd60e51b81526004018080602001828103825260358152602001806115da6035913960400191505060405180910390fd5b815160005b81811015610ebb57610dac838281518110610d4d57fe5b6020026020010151600080896001600160a01b03166001600160a01b031681526020019081526020016000206000878581518110610d8757fe5b60200260200101518152602001908152602001600020546114a590919063ffffffff16565b600080886001600160a01b03166001600160a01b031681526020019081526020016000206000868481518110610dde57fe5b6020026020010151815260200190815260200160002081905550610e66838281518110610e0757fe5b6020026020010151600080886001600160a01b03166001600160a01b031681526020019081526020016000206000878581518110610e4157fe5b602002602001015181526020019081526020016000205461144490919063ffffffff16565b600080876001600160a01b03166001600160a01b031681526020019081526020016000206000868481518110610e9857fe5b602090810291909101810151825281019190915260400160002055600101610d36565b50836001600160a01b0316856001600160a01b0316336001600160a01b03167f0cd22d55031cee2865950b0f7b21632297e045dda2896a4a418c151b6c60ff2e8686604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610f41578181015183820152602001610f29565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610f80578181015183820152602001610f68565b5050505090500194505050505060405180910390a45050505050565b610fae856001600160a01b03166114e7565b156111bd576000856001600160a01b0316632c57f66584338a8989886040518763ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561103f578181015183820152602001611027565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561107e578181015183820152602001611066565b50505050905001848103825285818151815260200191508051906020019080838360005b838110156110ba5781810151838201526020016110a2565b50505050905090810190601f1680156110e75780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600088803b15801561110c57600080fd5b5087f1158015611120573d6000803e3d6000fd5b50505050506040513d602081101561113757600080fd5b505190507fffffffff0000000000000000000000000000000000000000000000000000000081167fbc197c8100000000000000000000000000000000000000000000000000000000146111bb5760405162461bcd60e51b815260040180806020018281038252603f81526020018061169a603f913960400191505060405180910390fd5b505b505050505050565b6001600160a01b0384166000908152602081815260408083208584529091529020546111f190826114a5565b6001600160a01b03808616600090815260208181526040808320878452825280832094909455918616815280825282812085825290915220546112349082611444565b6001600160a01b03808516600081815260208181526040808320888452825291829020949094558051868152938401859052805191939288169233927fae2134db087f9040aa11ac22c005cb287be3c6195793167a1e17cb25e75d6814929181900390910190a450505050565b6112b3856001600160a01b03166114e7565b156111bd576000856001600160a01b031663b820d76d84338a8989886040518763ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561134557818101518382015260200161132d565b50505050905090810190601f1680156113725780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600088803b15801561139557600080fd5b5087f11580156113a9573d6000803e3d6000fd5b50505050506040513d60208110156113c057600080fd5b505190507fffffffff0000000000000000000000000000000000000000000000000000000081167ff23a6e6100000000000000000000000000000000000000000000000000000000146111bb5760405162461bcd60e51b815260040180806020018281038252603a8152602001806116d9603a913960400191505060405180910390fd5b60008282018381101561149e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600061149e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506114ed565b3b151590565b6000818484111561157c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611541578181015183820152602001611529565b50505050905090810190601f16801561156e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe4552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f524543495049454e544552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f4f50455241544f5245524331313535235f7361666542617463685472616e7366657246726f6d3a20494e56414c49445f4152524159535f4c454e47544845524331313535237361666542617463685472616e7366657246726f6d3a20494e56414c49445f524543495049454e54455243313135352362616c616e63654f6642617463683a20494e56414c49445f41525241595f4c454e47544845524331313535237361666542617463685472616e7366657246726f6d3a20494e56414c49445f4f50455241544f5245524331313535235f63616c6c6f6e45524331313535426174636852656365697665643a20494e56414c49445f4f4e5f524543454956455f4d45535341474545524331313535235f63616c6c6f6e4552433131353552656365697665643a20494e56414c49445f4f4e5f524543454956455f4d455353414745a2646970667358221220a7b58c6e18a3667507088a384752360caf0fdb8cb670387a2be1f02c9c12caae64736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Implementation of Multi-Token Standard contract",
    "kind": "dev",
    "methods": {
      "balanceOf(address,bytes32)": {
        "params": {
          "_hash": "Computed hash of erc721 contract address and its tokenId",
          "_owner": "The address of the token holder"
        },
        "returns": {
          "_0": "The _owner's balance of the Token type requested"
        }
      },
      "balanceOfBatch(address[],bytes32[])": {
        "params": {
          "_hashes": "Computed hash of erc721 contract address and its tokenId",
          "_owners": "The addresses of the token holders"
        },
        "returns": {
          "_0": "The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)"
        }
      },
      "dispensedOf(bytes32)": {
        "params": {
          "_hash": "Computed hash of erc721 contract address and its tokenId"
        },
        "returns": {
          "_0": "The _owner's balance of the Token type requested"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "_operator": "Address of authorized operator",
          "_owner": "The owner of the Tokens"
        },
        "returns": {
          "isOperator": "True if the operator is approved, false if not"
        }
      },
      "safeBatchTransferFrom(address,address,bytes32[],uint256[],bytes)": {
        "params": {
          "_amounts": "Transfer amounts per token type",
          "_data": "Additional data with no specified format, sent in call to `_to`",
          "_from": "Source addresses",
          "_hashes": "Computed hash of erc721 contract address and its tokenId",
          "_to": "Target addresses"
        }
      },
      "safeTransferFrom(address,address,bytes32,uint256,bytes)": {
        "params": {
          "_amount": "Transfered amount",
          "_data": "Additional data with no specified format, sent in call to `_to`",
          "_from": "Source address",
          "_hash": "Computed hash of erc721 contract address and its tokenId",
          "_to": "Target address"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "_approved": "True if the operator is approved, false to revoke approval",
          "_operator": "Address to add to the set of authorized operators"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `_interfaceID` and"
        }
      },
      "transferFrom(address,address,bytes32,uint256)": {
        "params": {
          "_amount": "Transfered amount",
          "_from": "Source address",
          "_hash": "Computed hash of erc721 contract address and its tokenId",
          "_to": "Target address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address,bytes32)": {
        "notice": "Get the balance of an account's Tokens"
      },
      "balanceOfBatch(address[],bytes32[])": {
        "notice": "Get the balance of multiple account/token pairs"
      },
      "dispensedOf(bytes32)": {
        "notice": "Get the balance of an account's Tokens"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Queries the approval status of an operator for a given owner"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Called by contract from which tokens are transferred"
      },
      "safeBatchTransferFrom(address,address,bytes32[],uint256[],bytes)": {
        "notice": "Send multiple types of Tokens from the _from address to the _to address (with safety call)"
      },
      "safeTransferFrom(address,address,bytes32,uint256,bytes)": {
        "notice": "Transfers amount amount of an _id from the _from address to the _to address specified"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "transferFrom(address,address,bytes32,uint256)": {
        "notice": "Transfers amount amount of an _id from the _from address to the _to address specified"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1918,
        "contract": "src/erc1155/ERC1155.sol:ERC1155",
        "label": "balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 1922,
        "contract": "src/erc1155/ERC1155.sol:ERC1155",
        "label": "dispensed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 1928,
        "contract": "src/erc1155/ERC1155.sol:ERC1155",
        "label": "operators",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}